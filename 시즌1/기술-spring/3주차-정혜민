1. **Spring vs Spring Boot**
    - **스프링과 스프링부트의 차이점이 있다면 설명하시오.**
        - 스프링 프레임워크의 다양한 기능으로 인해 환경설정이 복잡한 어려움을 극복하고자 나온 것이 스프링 부트이다.
        - 1) Embed Tomcat을 사용
        (Spring Boot 내부에 Tomcat이 포함되어있다.) 따로 Tomcat을 설치하거나 매번 버전을 관리해 주어야 하는 수고로움을 덜어준다.
        - 2) starter을 통한 dependency 자동화
        과거 Spring framework에서는 각각의 dependency들의 호환되는 버전을 일일이 맞추어 주어야 했고, 때문에 하나의 버전을 올리고자 하면 다른 dependeny에 까지 영향을 미쳐 version관리에 어려움이 많았다. 하지만, 이제 starter가 대부분의 dependency를 관리해주기 때문에 이러한 걱정을 많이 덜게 되었다.
        - 3) XML설정을 하지 않아도 된다.
        - 4) jar file을 이용해 자바 옵션만으로 손쉽게 배포가 가능하다.
        Spring Actuaor를 이용한 애플리케이션의 모니터링과 관리를 제공한다
            - keyword : autoconfiguration /빌드 배포
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/fc60e4bd-47ea-4de2-9c26-2093db246b15/Untitled.png)
    
    - **Spring Boot Starter란?**
        - starter란 특정 목적을 달성하기 위한 의존성 그룹이라고 생각하면 이해하기 쉽다. starter는 마치 npm처럼 간편하게 dependency를 제공해주는데, 만약 우리가 JPA가 필요하다면 prom.xml(메이븐)이나 build.gradle(그레이들)에 'spring-boot-starter-data-jpa'만 추가해주면 spring boot가 그에 필요한 라이브러리들을 알아서 받아온다.
2. **Gradle**
    - **Gradle과 Maven에 대해 설명하시오.**
        - Maven이란, 자바 전용 프로젝트 Lifecycle 관리 목적 빌드 도구이며 Apache Ant 불편함을 해결코자 만들어졌으며, 스프링에서 사용된다.
        - Gradle이란, Maven을 대체할 수 있는 프로젝트 구성 관리 및 범용 빌드 툴이며 Ant Builder와 Groovy Script를 기반으로 구축되어 기존 Ant의 역할과 배포 스크립의 기능을 모두 사용가능하며 스프링부트와 안드로이드에서 사용된다.
    - **Gradle과 Maven의 차이는?**
        - 기본 메이븐의 경우 XML로 라이브러리를 정의하고 활용하도록 되어 있으나, Gradle의 경우 별도의 빌드스크립트를 통하여 사용할 어플리케이션 버전, 라이브러리등의 항목을 설정 할 수 있다.
    - **Spring에서 Gradle의 역할**
        - 라이브러리 관리 : 메이븐 레파지토리를 동일하게 사용할 수 있어서 설정된 서버를 통하여 라이브러리를 다운로드 받아 모두 동일한 의존성을 가진 환경을 수정할 수 있다. 자신이 추가한 라이브러리도 레파지토리 서버에 올릴 수 있다.
        - 프로젝트 관리 : 모든 프로젝트가 일관된 디렉토리 구조를 가지고 빌드 프로세스를 유지하도록 도와준다.
        - 단위 테스트 시 의존성 관리 : junit 등을 사용하기 위해서 명시한다.
        
        gradle/maven 하는 일 : 테스트 진행 → 빌드 진행 → 도커 업로드 같은 의존관계 설정
        즉, 배포와 테스트, 빌드를 전부 관여하는 툴
3. **Servlet + Tomcat**
    - **Tomcat이란?**
        
        톰캣은 아파치 소프트웨어 재단의 웹 어플리케이션 서버(와스)로서,자바 서블릿을 실행키고 JSP코드가 포함되어 있는 웹 페이지를 만들어준다.
        
    - **Servlet이란?**
        - 클라이언트의 요청을 처리하고, 그 결과를 반환하는 Servlet 클래스의 구현 규칙을 지킨 자바 웹 프로그래밍 기술
        - 간단히 말해서, 서블릿이란 자바를 사용하여 웹을 만들기 위해 필요한 기술이다.
    - **Spring에서는 둘을 어떻게 활용하는가?**
    
    war : 톰캣 내장 안되어 있음. 외장 톰캣 필요
    
    jar : 톰캣 내장되어 있음/ JVM에서 돌아갈 수 있는 모든 것을 합쳐놓은 것
    
    ---
    
    # 목요일 토픽
    
    1. Spring MVC 구조
        - MVC란 어떤 구조인가?
            - (what?)Model , view, controller의 3가지 역할로 구성된 디자인 패턴
            - 디자인 패턴이란,프로그램 등 개발할 때 발생했던 문제점을 정리해서 문제가 재발하지 않도록 규약을 정해둔 것
        
        ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e93f5c24-daf8-4621-989d-0f03da7d77e7/Untitled.png)
        
        - Spring에서의 MVC 구조는 어떻게 사용되는가?
    2. DI + IoC container
        - DI(Dependency Injection)이란?
            - **DI는 의존 관계를 외부에서 결정(주입)해주는 것을** 말한다. 스프링에서는 이러한 DI를 담당하는 DI 컨테이너가 존재한다. 이 DI 컨테이너가 객체들 간의 의존 관계를 주입한다.
        - IoC Container란?
            
            > 컨테이너? - 컨테이너는 보통 객체의 생명주기를 관리, 생성된 인스턴스들에게 추가적인 기능을 제공하도록 하는 것
            > 
            - 스프링 프레임워크도 객체를 생성하고 관리하고 책임지고 의존성을 관리해주는 컨테이너가 있는데,그것이 바로 IoC 컨테이너(=스프링 컨테이너) 이다.
            - **인스턴스 생성부터 소멸까지의 인스턴스 생명주기 관리를 개발자가 아닌 컨테이너가 대신 해준다.**
            - **객체관리 주체가 프레임워크(Container)가 되기 때문에 개발자는 로직에 집중할 수 있는 장점이 있다.**
            - IoC 컨테이너는 객체의 생성을 책임지고, 의존성을 관리한다.
            - POJO의 생성, 초기화, 서비스, 소멸에 대한 권한을 가진다.
            - 개발자들이 직접 POJO를 생성할 수 있지만 컨테이너에게 맡긴다.
            - 개발자는 비즈니스 로직에 집중할 수 있다.
            - 객체 생성 코드가 없으므로 TDD가 용이하다.
        - 이 둘을 Spring에서는 어떻게 활용하는가?
            - 스프링 컨테이너가 관리하는 객체를 **빈(Bean)**이라고 하고,이 빈들을 관리한다는 의미로 컨테이너를 **빈 팩토리(BeanFactory)** 라고 부른다.
            - 객체의 생성과 객체 사이의 런타임 관계를 DI 관점에서 볼 때 컨테이너를 **BeanFactory**라고 한다.
            - BeanFactory에 여러가지 컨테이너 기능을 추가한 **어플리케이션컨텍스트(ApplicationContext)** 가 있다.
    3. Spring AOP
        - AOP란?
            - **Aspect Oriented Programming**의 약자로 **관점 지향 프로그래밍**이라고 불린다. 
            관점 지향은 쉽게 말해 **어떤 로직을 기준으로 핵심적인 관점, 부가적인 관점으로 나누어서 보고 그 관점을 기준으로 각각 모듈화하겠다는 것이다.** 여기서 모듈화란 어떤 공통된 로직이나 기능을 하나의 단위로 묶는 것을 말한다.
        - 프록시 패턴이란?
            - 프록시 패턴은 어떤 객체에 대한 접근을 제어하는 용도로 대리인이나 대변인에 해당하는 객체를 제공하는 패턴이다.
            - 주로 프록시 패턴은 RealSubject 가 원격 시스템에서 돌아가거나, 그 객체의 생성 비용이 많이 들어 실제 사용 시점에 객체를 생성하거나,실제 객체에 접근을 제한 및 제어를 해야 할 때 등 의 경우에 사용 된다.
            
            ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2cd7baa5-d831-4857-b12c-761285f3b8a0/Untitled.png)
            
    4. Bean
        - Java Bean, Spring Bean이란?
            - 자바 빈: **특정한 정보 (id, password, name, job...)등을 가지고 있는 클래스를 표현하는 하나의 규칙이고, 데이터를 표현하기 위한 목적을 지니고 있음. 이 규칙을 지닌 클래스를 Java Bean 이라고 함.**
            - **Java Bean의 규약**
                - 반드시 클래스는 패키지화 되어야 함
                - 멤버변수는 property(프로퍼티)라고 함
                - 멤버변수는 private로 지정하고, 외부접근을 위한 get, set 메소드를 정의해야 함
                - get, set 메소드는 public으로 지정
            - 스프링 빈 : 스프링 빈은 스프링 컨테이너에 의해 관리되는 자바 객체(POJO)를 의미한다.
            - 
            
            **컴포넌트 스캔의 대상**
            
            @Component 외에 @Controller, @Service, @Repository, @Configuration는 @Component의 상속을 받고 있으므로 모두 컴포넌트 스캔의 대상이다.
            
            - @Controller
                - 스프링 MVC 컨트롤러로 인식된다.
            - @Repository
                - 스프링 데이터 접근 계층으로 인식하고 해당 계층에서 발생하는 예외는 모두 DataAccessException으로 변환한다.
            - @Service
                - 특별한 처리는 하지 않으나, 개발자들이 핵심 비즈니스 계층을 인식하는데 도움을 준다.
            - @Configuration
                - 스프링 설정 정보로 인식하고 스프링 빈이 싱글톤을 유지하도록 추가 처리를 한다. (물론 스프링 빈 스코프가 싱글톤이 아니라면 추가 처리를 하지 않음.)
        - Spring에서 Bean의 생명주기
            - 스프링컨테이너 생성 -> 스프링 빈 생성 -> 의존관계 주입 -> 초기화 콜백 -> 사용 -> 소멸전 콜백 -> 스프링 종료
            
            ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/fb718226-ace3-49be-975e-0e971af8126d/Untitled.png)
            
        - @Bean 과 @Component의 차이는?
            - @Bean
                - 개발자가 컨트롤이 불가능한 **외부 라이브러리들을 Bean으로 등록하고 싶은 경우**에 사용된다.
                - 메소드 또는 어노테이션 단위에 붙일 수 있다.
            - @Component
                - 개발자가 **직접 컨트롤이 가능한 클래스들의 경우**에 사용된다.
                - 클래스 또는 인터페이스 단위에 붙일 수 있다.
